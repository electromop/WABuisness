import os.path
import random

from whatsapp_chatbot_python import GreenAPIBot, Notification

from database.models import UserRole
from YaDisk import YaDisk
from config_reader import config
from database.queries import SyncORM
from states import States

bot = GreenAPIBot(config.id_instance.get_secret_value(), config.token_whatsapp.get_secret_value())
disk = YaDisk(token=config.token_ya.get_secret_value())
menu = ("–Ø –º–æ–≥—É —Ä–∞—Å—Åƒ∏–∞–∑–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ:\n\n"
        "1. –°—Ä–æ—á–Ω–æ –∏ –≤–∞–∂–Ω–æ\n"
        "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
        "3. –ò–Ω—Ñ–æ–ø–∞–∫\n"
        "4. –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏\n"
        "5. –ü–∞–º—è—Ç–∫–∞ –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞\n"
        "6. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π\n"
        "7. –ö–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "8. KPI –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è\n"
        "9. FAQ / –ß–∞–í–æ (—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã)\n"
        "*–í—ã–±–µ—Ä–∏ –∏–∑ ƒ∏–∞ƒ∏–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤ —á–∞—Ç*\n\n"
        "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ƒ∏ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ \"–ú–µ–Ω—é\"")

unknown = ("–ù–µ —Å–æ–≤—Å–µ–º —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é."
           "\n‚úÖ - –ï—Å–ª–∏ —Ç—ã –∏–∑—É—á–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, —Ç–æ –Ω–∞–ø–∏—à–∏ \"–ò–∑—É—á–µ–Ω–æ\""
           "\nüîç - –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª, —Ç–æ –Ω–∞–ø–∏—à–∏ \"–ú–µ–Ω—é\""
           "\n‚ùì - –ï—Å–ª–∏ —Ç—ã –∑–∞–ø—É—Ç–∞–ª—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ \"–ü–æ–º–æ—â—å\"")

no_files = ("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –Ω–æ —è –¥–µ–ª–∞—é –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã ƒ∏–∞ƒ∏ –º–æ–∂–Ω–æ —Åƒ∏–æ—Ä–µ–µ "
            "—Ç–µ–±–µ –æ –Ω–∏—Ö —Ä–∞—Å—Åƒ∏–∞–∑–∞—Ç—å. ‚ú®ü§ùüèª\n*–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –∏ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –Ω–æ–º–µ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç—Ç–æ–º—É "
            "—Ä–∞–∑–¥–µ–ª—É.*")

downloading = ["–ó–∞–≥—Ä—É–∂–∞—é –¥–ª—è —Ç–µ–±—è –¥–∞–Ω–Ω—ã–µ....", "–ù–µ —É—Ö–æ–¥–∏ –¥–∞–ª–µƒ∏–æ! –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...", "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –î–∞–π –Ω–∞–º –Ω–µ–º–Ω–æ–≥–æ "
                                                                                       "–≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑ƒ∏—É..."]


@bot.router.message(command="start")
def start_command(notification: Notification) -> None:
    sender = notification.sender
    notification.state_manager.set_state(sender, States.KEY_WORD.value)
    notification.answer("–ü—Ä–∏–≤–µ—Ç, –∫–æ–ª–ª–µ–≥–∞! ü•≥\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –•–µ–ª–ª–ø–µ—Ä, —è —á–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫.\n–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ "
                        "–Ω–æ–≤–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç "
                        "—Ç–µ–±–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º. üìöüìÇ\n–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –Ω–æ–≤—ã—Ö "
                        "–≤—ã—Å–æ—Ç!\n–ù–∞—á–Ω–µ–º –Ω–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n*–í–≤–µ–¥–∏ ƒ∏–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, "
                        "—á—Ç–æ —è —É–º–µ—é.* üéØ\n*–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —É —Å–≤–æ–µ–≥–æ —Ä—Éƒ∏–æ–≤–æ–¥–∏—Ç–µ–ª—è")


@bot.router.message(text_message=["–ü–æ–º–æ—â—å", "–ø–æ–º–æ—â—å", "–ü–æ–º–æ—â—å.", "–ø–æ–º–æ—â—å.", "\"–ü–æ–º–æ—â—å\"", "\"–ø–æ–º–æ—â—å\"", "–ü–û–ú–û–©–¨"])
def help_command(notification: Notification):
    sender = notification.sender
    notification.state_manager.update_state(sender, States.HELP.value)
    notification.answer("–î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è:"
                        "\n\n‚úÖ - –ï—Å–ª–∏ —Ç—ã –∏–∑—É—á–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, —Ç–æ –Ω–∞–ø–∏—à–∏ \"–ò–∑—É—á–µ–Ω–æ\""
                        "\n\nüîç - –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª, —Ç–æ –Ω–∞–ø–∏—à–∏ \"–ú–µ–Ω—é\""
                        "\n\n‚ùó –ï—Å–ª–∏ –≤–æ–∑–Ω–∏ƒ∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Ä–∞–±–æ—Ç–æ–π —á–∞—Ç-–±–æ—Ç–∞ –∏–ª–∏ —Ç—ã –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç "
                        "ƒ∏–æ—Ä—Ä–µƒ∏—Ç–Ω–æ, "
                        "—Ç–æ –ø—Ä–∏—à–ª–∏ —Åƒ∏—Ä–∏–Ω –Ω–∞ –ø–æ—á—Ç—É learn.merch@merch.ancor.ru.\n\n"
                        "–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂ƒ∏–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏ƒ∏–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 9 –¥–æ 18 –º—Åƒ∏"
                        )


@bot.router.message(text_message=["–ü—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç", "\"–ü—Ä–∏–≤–µ—Ç\"", "\"–ø—Ä–∏–≤–µ—Ç\"", "–ü–†–ò–í–ï–¢", "–ü—Ä–∏–≤–µ—Ç.", "–ø—Ä–∏–≤–µ—Ç."])
def greeting(notification: Notification):
    sender = notification.sender
    key = SyncORM.find_user_by_phone(sender.split("@")[0])
    if not key:
        notification.state_manager.set_state(sender, States.KEY_WORD.value)
        notification.answer("–ü—Ä–∏–≤–µ—Ç, –∫–æ–ª–ª–µ–≥–∞! ü•≥\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –•–µ–ª–ª–ø–µ—Ä, —è —á–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫.\n–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ "
                        "–Ω–æ–≤–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç "
                        "—Ç–µ–±–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º. üìöüìÇ\n–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –Ω–æ–≤—ã—Ö "
                        "–≤—ã—Å–æ—Ç!\n–ù–∞—á–Ω–µ–º –Ω–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n*–í–≤–µ–¥–∏ ƒ∏–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, "
                        "—á—Ç–æ —è —É–º–µ—é.* üéØ\n*–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —É —Å–≤–æ–µ–≥–æ —Ä—Éƒ∏–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        return
    notification.state_manager.update_state(sender, States.CATEGORY.value)
    notification.answer(menu)


@bot.router.message(text_message=["–ú–µ–Ω—é", "–º–µ–Ω—é", "\"–ú–µ–Ω—é\"", "\"–º–µ–Ω—é\"", "–ú–ï–ù–Æ", "–º–µ–Ω—é.", "–ú–µ–Ω—é."])
def menu_handler(notification: Notification):
    sender = notification.sender
    key = SyncORM.find_user_by_phone(sender.split("@")[0])
    if not key:
        notification.state_manager.set_state(sender, States.KEY_WORD.value)
        notification.answer("–ü—Ä–∏–≤–µ—Ç, –∫–æ–ª–ª–µ–≥–∞! ü•≥\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –•–µ–ª–ª–ø–µ—Ä, —è —á–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫.\n–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ "
                        "–Ω–æ–≤–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç "
                        "—Ç–µ–±–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º. üìöüìÇ\n–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –Ω–æ–≤—ã—Ö "
                        "–≤—ã—Å–æ—Ç!\n–ù–∞—á–Ω–µ–º –Ω–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n*–í–≤–µ–¥–∏ ƒ∏–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, "
                        "—á—Ç–æ —è —É–º–µ—é.* üéØ\n*–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —É —Å–≤–æ–µ–≥–æ —Ä—Éƒ∏–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        return
    notification.state_manager.update_state(sender, States.CATEGORY.value)
    notification.answer(menu)


# @bot.router.message(command="search")
# def search(notification: Notification) -> None:
#     sender = notification.sender
#     notification.state_manager.update_state(sender, States.SEARCH.value)
#     notification.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")


# @bot.router.message(command="files")
# def get_all_files(notification: Notification):
#     sender = notification.sender
#     key = SyncORM.find_user_by_phone(sender.split("@")[0])
#     if not key:
#         notification.answer("–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π")
#         return
#     files = set([i["name"] for i in disk.get_files() if i.get("type") != "dir"])
#     notification.answer(("{:s}\n" * len(files)).format(*files)[:-1:])


@bot.router.message(command="send")
def send_message(notification: Notification):
    sender = notification.sender
    user = SyncORM.find_user_by_phone(sender.split("@")[0])
    if user.role != UserRole.admin:
        notification.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return
    notification.state_manager.update_state(sender, States.TYPE.value)
    notification.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                        "1. –í—Å–µ–º\n\n"
                        "2. –ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É\n\n"
                        "3. –ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É")


# @bot.router.message(command="feedback")
# def feedback_command(notification: Notification):
#     sender = notification.sender
#     key = SyncORM.find_user_by_phone(sender.split("@")[0])
#     if not key:
#         notification.answer("–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π")
#         return
#     notification.state_manager.update_state(sender, States.FEEDBACK.value)
#     notification.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤")


@bot.router.message(state=States.HELP.value)
def handle_help(notification: Notification):
    notification.answer(unknown)

@bot.router.message(state=States.TYPE.value)
def handle_mailing_type(notification: Notification):
    mailing_type = notification.message_text
    sender = notification.sender
    notification.state_manager.update_state_data(sender, {"mailing_type": mailing_type})
    
    if mailing_type == "1" or mailing_type.lower() == "–≤—Å–µ–º":
        notification.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        notification.state_manager.update_state_data(sender, {"mailing_type": 'all_users'})
        notification.state_manager.update_state(sender, States.SEND.value)

    elif mailing_type == "2" or mailing_type.lower() == "–ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É":
        notification.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
        notification.state_manager.update_state_data(sender, {"mailing_type": 'keyword'})
        notification.state_manager.update_state(sender, States.PARAMETER.value)
    
    elif mailing_type == "3" or mailing_type.lower() == "–ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É":
        notification.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω")
        notification.state_manager.update_state_data(sender, {"mailing_type": 'region'})
        notification.state_manager.update_state(sender, States.PARAMETER.value)
        
    else:
        notification.answer(unknown)
        notification.state_manager.update_state(sender, States.TYPE.value)
        
    
    
@bot.router.message(state=States.PARAMETER.value)
def handle_mailing_parameter(notification: Notification):
    #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    print('–î–æ—à–ª–∏ –¥–æ —Å—é–¥–∞')
    mailing_type = notification.state_manager.get_state_data(notification.sender)["mailing_type"]
    sender = notification.sender
    if mailing_type != 'all_users':
        notification.state_manager.update_state_data(sender, {mailing_type: notification.message_text})
    
    notification.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    notification.state_manager.update_state(sender, States.SEND.value)

@bot.router.message(state=States.SEND.value)
def send_message_handler(notification: Notification):
    title = notification.message_text
    sender = notification.sender
    notification.state_manager.update_state_data(sender, {"title": title})
    notification.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    notification.state_manager.update_state(sender, States.SEND_TEXT.value)



@bot.router.message(state=States.SEND_TEXT.value)
def send_text(notification: Notification):
    sender = notification.sender
    text = notification.message_text
    mailing_type = notification.state_manager.get_state_data(sender)["mailing_type"]
    title = notification.state_manager.get_state_data(sender)["title"]

    keyword = None
    region = None
    
    if mailing_type == 'all_users':
        users = SyncORM.get_all_users()
    elif mailing_type == 'keyword':
        keyword = notification.state_manager.get_state_data(sender)["keyword"]
        users = SyncORM.find_users_by_key(keyword)
    elif mailing_type == 'region':
        region = notification.state_manager.get_state_data(sender)["region"]
        users = SyncORM.find_users_by_region(region)
    
    for user in users:
        mailing_text = f"{title}\n{text}\n\n*–ù–µ –∑–∞–±—É–¥—å –∑–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª \"–°—Ä–æ—á–Ω–æ –∏ –≤–∞–∂–Ω–æ\" –∏ —É–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–Ω—ã–º*"
        notification.api.sending.sendMessage(user.chat_id, mailing_text)
        
    notification.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    notification.state_manager.update_state(sender, States.CATEGORY.value)
    SyncORM.insert_mailing(title, text, mailing_type, keyword, region)


def get_formatted_string(files):
    return (
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –∏–∑—É—á–∏—Ç—å? ü§î\n"
        + "".join([f"{i + 1}. {file[0]}\n" for i, file in enumerate(files)])[:-1]
        + "\n*–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–æ–º–µ—Ä/—Ü–∏—Ñ—Ä—É —ç—Ç–æ–π —Ç–µ–º—ã –≤ —á–∞—Ç*\n\n–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å "
          "–≤–µ—Ä–Ω—É—Ç—å—Å—è ƒ∏ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ \"–ú–µ–Ω—é\""
    )

def handle_single_file(notification, file):
    notification.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª: {file[0]}. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
    sender = notification.sender
    notification.state_manager.update_state_data(sender, {"category": [file], "single": True})
    notification.state_manager.update_state(sender, States.DOWNLOAD.value)
    
    handel_download_file(notification)

def handle_category_selection(notification, directory_path):
    sender = notification.sender
    res = disk.listdir(directory_path)
    
    if not res:
        notification.answer(no_files)
        notification.answer(menu)
        return

    files = [(i["name"], i["path"]) for i in res]
    
    if len(files) == 1:
        handle_single_file(notification, files[0])
    else:
        formatted_string = get_formatted_string(files)
        notification.answer(formatted_string)
        notification.state_manager.set_state_data(sender, {"category": files, "single": False})
        notification.state_manager.update_state(sender, States.DOWNLOAD.value)

@bot.router.message(state=States.CATEGORY.value)
def choose_category(notification: Notification):
    category_paths = {
        "1": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/1. –°—Ä–æ—á–Ω–æ –∏ –≤–∞–∂–Ω–æ",
        "2": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        "3": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/3. –ò–Ω—Ñ–æ–ø–∞–∫",
        "4": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/4. –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏",
        "5": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/5. –ü–∞–º—è—Ç–∫–∞ –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞",
        "6": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/6. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
        "7": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/7. –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "8": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/8. KPI –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è",
        "9": "disk:/–ó–∞–≥—Ä—É–∑–∫–∏/–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä–∞-–Ω–æ–≤–∏—á–∫–∞/–†–∞–∑–¥–µ–ª/9. FAQ_–ß–∞–í–æ (—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã)"
    }

    message_text = notification.message_text

    for key, directory in category_paths.items():
        if message_text == key or message_text in directory.split("/")[-1]:
            handle_category_selection(notification, directory)
            return

    notification.answer(unknown)



@bot.router.message(state=States.READY.value)
def ready_handler(notification: Notification):
    sender = notification.sender
    phone = sender.split("@")[0]
    key_mat = notification.state_manager.get_state_data(sender)["material"]
    
    
    if notification.message_text.lower() in ["–∏–∑—É—á–µ–Ω–æ", "\"–∏–∑—É—á–µ–Ω–æ\"", "\'–∏–∑—É—á–µ–Ω–æ\'"]:
        SyncORM.read_material(key_mat, phone)
        notification.answer("–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –±—ã–ª –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!\n"
                            "üîç -  –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã, —Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç \"–ú–µ–Ω—é\"\n"
                            "–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ƒ∏–∞ƒ∏–∞—è-–Ω–∏–±—É–¥—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Ç–æ —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏\n"
                            "–ü–∏—à–∏ –º–Ω–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –£—Å–ø–µ—Ö–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ!‚ô•")
        notification.state_manager.update_state(sender, States.CATEGORY.value)
        return
    notification.answer(unknown)


@bot.router.message(state=States.SEARCH.value)
def search_handler(notification: Notification) -> None:
    sender = notification.sender
    key_word = SyncORM.find_user_by_phone(sender.split("@")[0])
    if not key_word:
        notification.answer("–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π")
        return
    material = SyncORM.find_material(notification.message_text.strip().lower())
    if material:
        name = material.name
    else:
        notification.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    files = [(i["name"], i["path"]) for i in disk.get_files()]
    is_send = False
    curr_path = os.path.dirname(__file__)
    prj_dir = os.path.join(curr_path)
    for file in files:
        if name in file[0]:
            try:
                notification.answer(random.choice(downloading))
                disk.download_file(file[1], f"{prj_dir}/files/{file[0]}")
            except Exception:
                notification.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                return
            notification.answer_with_file(f"{prj_dir}/files/{file[0]}", file[0])
            notification.answer("‚úÖ *–ü–æ—Å–ª–µ –æ–∑–Ω–∞ƒ∏–æ–º–ª–µ–Ω–∏—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç \"–ò–∑—É—á–µ–Ω–æ\"*")
            notification.state_manager.update_state(sender, States.READY.value)
            notification.state_manager.update_state_data(sender, {"material": notification.message_text})
            os.remove(f"{prj_dir}/files/{file[0]}")
            is_send = True
    if not is_send:
        notification.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


@bot.router.message(state=States.FEEDBACK.value)
def give_feedback(notification: Notification):
    text = notification.message_text
    sender = notification.sender
    SyncORM.new_feedback(text, sender.split("@")[0])
    notification.answer("–í–∞—à –æ—Ç–∑—ã–≤ –∑–∞–ø–∏—Å–∞–Ω")
    notification.state_manager.update_state(sender, States.KEY_WORD.value)


@bot.router.message(state=States.DOWNLOAD.value)
def handel_download_file(notification: Notification):
    sender = notification.sender
    files = notification.state_manager.get_state_data(sender)["category"]
    is_single = notification.state_manager.get_state_data(sender)["single"]
    
    
    try:
        option = int(notification.message_text) if not is_single else 1
    except Exception:
        notification.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä")
        return
    if option > len(files):
        notification.answer("‚ùå –¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n*–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –Ω–∞–ø–∏—à–∏ \"–ú–µ–Ω—é\"*")
        return
    elif files[option - 1][1] == "–†–∞—Å—Å—ã–ª–∫–∞":
        mailing_title = files[option - 1][0]
        print(mailing_title)
        files[option - 1][0] = '–†–∞—Å—Å—ã–ª–∫–∞ - ' + mailing_title
        mailing_text = SyncORM.get_mailing_text(mailing_title)
        
        notification.answer(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {mailing_title}\n\n{mailing_text}")
    else:    
        curr_path = os.path.dirname(__file__)
        prj_dir = os.path.join(curr_path)
        try:
            notification.answer(random.choice(downloading))
            disk.download_file(files[option - 1][1], f"{prj_dir}/files/{files[option - 1][0]}")
        except Exception:
            notification.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        notification.answer_with_file(f"{prj_dir}/files/{files[option - 1][0]}", files[option - 1][0])
        os.remove(f"{prj_dir}/files/{files[option - 1][0]}")
        
    notification.answer("‚úÖ *–ü–æ—Å–ª–µ –æ–∑–Ω–∞ƒ∏–æ–º–ª–µ–Ω–∏—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç \"–ò–∑—É—á–µ–Ω–æ\"*")
    notification.state_manager.update_state(sender, States.READY.value)
    print("material key value", files[option - 1][0])
    
    notification.state_manager.update_state_data(sender, {"material": files[option - 1][0]})


@bot.router.message(state=States.KEY_WORD.value)
def key_word_handler(notification: Notification) -> None:
    sender = notification.sender
    key_word = notification.message_text.lower().strip()
    if key_word := SyncORM.check_key(key_word):
        chat = notification.chat
        phone = sender.split("@")[0]
        SyncORM.insert_user(key_word_id=key_word.id, chat_id=chat, phone_number=phone)
        notification.state_manager.update_state(sender, States.CATEGORY.value)
        notification.state_manager.update_state_data(sender, {"key_word": key_word})
        notification.answer(menu)
    else:
        notification.answer("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.\n–ü—Ä–æ–≤–µ—Ä—å ƒ∏–æ—Ä—Ä–µƒ∏—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–Ω–æ.üßê\n\n–ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –∏–ª–∏ –∑–∞–±—ã–ª ƒ∏–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —Ç–æ —É–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —É —Å–≤–æ–µ–≥–æ —Ä—Éƒ∏–æ–≤–æ–¥–∏—Ç–µ–ª—è")


if __name__ == "__main__":
    print('ok')
    bot.run_forever()

